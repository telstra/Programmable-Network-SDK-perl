=begin comment

Telstra Programmable Network API

Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package TelstraTPN::ContractsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use TelstraTPN::ApiClient;
use TelstraTPN::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => TelstraTPN::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# 100_inventory_links_contract_by_linkid_and_contractid_get
#
# Get active Contract by ContractID
# 
# @param string $linkid Unique identifier representing a specific link (required)
# @param string $contractid Unique identifier representing a specific contract (required)
{
    my $params = {
    'linkid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific link',
        required => '1',
    },
    'contractid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific contract',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ '100_inventory_links_contract_by_linkid_and_contractid_get' } = { 
    	summary => 'Get active Contract by ContractID',
        params => $params,
        returns => 'Model100InventoryLinksContractResponse',
        };
}
# @return Model100InventoryLinksContractResponse
#
sub 100_inventory_links_contract_by_linkid_and_contractid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'linkid' is set
    unless (exists $args{'linkid'}) {
      croak("Missing the required parameter 'linkid' when calling 100_inventory_links_contract_by_linkid_and_contractid_get");
    }

    # verify the required parameter 'contractid' is set
    unless (exists $args{'contractid'}) {
      croak("Missing the required parameter 'contractid' when calling 100_inventory_links_contract_by_linkid_and_contractid_get");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/links/{linkid}/contract/{contractid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'linkid'}) {
        my $_base_variable = "{" . "linkid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'linkid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contractid'}) {
        my $_base_variable = "{" . "contractid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contractid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Model100InventoryLinksContractResponse', $response);
    return $_response_object;
}

#
# 100_inventory_links_contract_by_linkid_and_contractid_put
#
# Update active Contract by ContractID
# 
# @param string $linkid Unique identifier representing a specific link (required)
# @param string $contractid Unique identifier representing a specific contract (required)
# @param Model100InventoryLinksContractRequest $body  (optional)
{
    my $params = {
    'linkid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific link',
        required => '1',
    },
    'contractid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific contract',
        required => '1',
    },
    'body' => {
        data_type => 'Model100InventoryLinksContractRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ '100_inventory_links_contract_by_linkid_and_contractid_put' } = { 
    	summary => 'Update active Contract by ContractID',
        params => $params,
        returns => 'Model100InventoryLinksContractResponse33',
        };
}
# @return Model100InventoryLinksContractResponse33
#
sub 100_inventory_links_contract_by_linkid_and_contractid_put {
    my ($self, %args) = @_;

    # verify the required parameter 'linkid' is set
    unless (exists $args{'linkid'}) {
      croak("Missing the required parameter 'linkid' when calling 100_inventory_links_contract_by_linkid_and_contractid_put");
    }

    # verify the required parameter 'contractid' is set
    unless (exists $args{'contractid'}) {
      croak("Missing the required parameter 'contractid' when calling 100_inventory_links_contract_by_linkid_and_contractid_put");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/links/{linkid}/contract/{contractid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'linkid'}) {
        my $_base_variable = "{" . "linkid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'linkid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contractid'}) {
        my $_base_variable = "{" . "contractid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contractid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Model100InventoryLinksContractResponse33', $response);
    return $_response_object;
}

#
# 100_inventory_links_contract_by_linkid_post
#
# Create new Contract on specified link
# 
# @param string $linkid Unique identifier representing a specific link (required)
# @param Model100InventoryLinksContractRequest37 $body  (optional)
{
    my $params = {
    'linkid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific link',
        required => '1',
    },
    'body' => {
        data_type => 'Model100InventoryLinksContractRequest37',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ '100_inventory_links_contract_by_linkid_post' } = { 
    	summary => 'Create new Contract on specified link',
        params => $params,
        returns => 'Model100InventoryLinksContractResponse38',
        };
}
# @return Model100InventoryLinksContractResponse38
#
sub 100_inventory_links_contract_by_linkid_post {
    my ($self, %args) = @_;

    # verify the required parameter 'linkid' is set
    unless (exists $args{'linkid'}) {
      croak("Missing the required parameter 'linkid' when calling 100_inventory_links_contract_by_linkid_post");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/links/{linkid}/contract';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'linkid'}) {
        my $_base_variable = "{" . "linkid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'linkid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Model100InventoryLinksContractResponse38', $response);
    return $_response_object;
}

1;

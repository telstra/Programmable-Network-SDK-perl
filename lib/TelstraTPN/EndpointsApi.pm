=begin comment

Telstra Programmable Network API

Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package TelstraTPN::EndpointsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use TelstraTPN::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'TelstraTPN::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = TelstraTPN::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# eis100_endpoints_assign_topology_tag_by_endpointuuid_post
#
# Assign a Topology Tag to an Endpoint
# 
# @param string $endpointuuid Unique identifier representing a specific endpoint (required)
# @param Eis100EndpointsAssignTopologyTagRequest $body  (optional)
{
    my $params = {
    'endpointuuid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific endpoint',
        required => '1',
    },
    'body' => {
        data_type => 'Eis100EndpointsAssignTopologyTagRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eis100_endpoints_assign_topology_tag_by_endpointuuid_post' } = { 
    	summary => 'Assign a Topology Tag to an Endpoint',
        params => $params,
        returns => 'ARRAY[SuccessFragment]',
        };
}
# @return ARRAY[SuccessFragment]
#
sub eis100_endpoints_assign_topology_tag_by_endpointuuid_post {
    my ($self, %args) = @_;

    # verify the required parameter 'endpointuuid' is set
    unless (exists $args{'endpointuuid'}) {
      croak("Missing the required parameter 'endpointuuid' when calling eis100_endpoints_assign_topology_tag_by_endpointuuid_post");
    }

    # parse inputs
    my $_resource_path = '/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'endpointuuid'}) {
        my $_base_variable = "{" . "endpointuuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'endpointuuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SuccessFragment]', $response);
    return $_response_object;
}

#
# inventory_endpoint_by_endpointuuid_get
#
# Get information about the specified endpoint
# 
# @param string $endpointuuid Unique identifier representing a specific endpoint (required)
{
    my $params = {
    'endpointuuid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific endpoint',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_endpoint_by_endpointuuid_get' } = { 
    	summary => 'Get information about the specified endpoint',
        params => $params,
        returns => 'InventoryEndpointResponse',
        };
}
# @return InventoryEndpointResponse
#
sub inventory_endpoint_by_endpointuuid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'endpointuuid' is set
    unless (exists $args{'endpointuuid'}) {
      croak("Missing the required parameter 'endpointuuid' when calling inventory_endpoint_by_endpointuuid_get");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/endpoint/{endpointuuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'endpointuuid'}) {
        my $_base_variable = "{" . "endpointuuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'endpointuuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InventoryEndpointResponse', $response);
    return $_response_object;
}

#
# inventory_endpoints_customeruuid_by_customeruuid_get
#
# Get list of endpoints for a customer
# 
# @param string $customeruuid Unique identifier representing a specific customer (required)
{
    my $params = {
    'customeruuid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific customer',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_endpoints_customeruuid_by_customeruuid_get' } = { 
    	summary => 'Get list of endpoints for a customer',
        params => $params,
        returns => 'InventoryEndpointsCustomeruuidResponse',
        };
}
# @return InventoryEndpointsCustomeruuidResponse
#
sub inventory_endpoints_customeruuid_by_customeruuid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'customeruuid' is set
    unless (exists $args{'customeruuid'}) {
      croak("Missing the required parameter 'customeruuid' when calling inventory_endpoints_customeruuid_by_customeruuid_get");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/endpoints/customeruuid/{customeruuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'customeruuid'}) {
        my $_base_variable = "{" . "customeruuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'customeruuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InventoryEndpointsCustomeruuidResponse', $response);
    return $_response_object;
}

#
# inventory_regularendpoint_post
#
# Create Physical (Port) Endpoint
# 
# @param InventoryRegularendpointRequest $body  (optional)
{
    my $params = {
    'body' => {
        data_type => 'InventoryRegularendpointRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_regularendpoint_post' } = { 
    	summary => 'Create Physical (Port) Endpoint',
        params => $params,
        returns => 'ARRAY[InventoryRegularendpointResponse]',
        };
}
# @return ARRAY[InventoryRegularendpointResponse]
#
sub inventory_regularendpoint_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/regularendpoint';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InventoryRegularendpointResponse]', $response);
    return $_response_object;
}

#
# inventory_vnfendpoint_post
#
# Create VNF Endpoint
# 
# @param InventoryVnfendpointRequest $body  (optional)
{
    my $params = {
    'body' => {
        data_type => 'InventoryVnfendpointRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_vnfendpoint_post' } = { 
    	summary => 'Create VNF Endpoint',
        params => $params,
        returns => 'ARRAY[InventoryVnfendpointResponse]',
        };
}
# @return ARRAY[InventoryVnfendpointResponse]
#
sub inventory_vnfendpoint_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/vnfendpoint';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InventoryVnfendpointResponse]', $response);
    return $_response_object;
}

1;

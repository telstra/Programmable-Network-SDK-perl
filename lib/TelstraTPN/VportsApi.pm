=begin comment

Telstra Programmable Network API

Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

OpenAPI spec version: 2.1.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package TelstraTPN::VportsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use TelstraTPN::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'TelstraTPN::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = TelstraTPN::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# inventory_regularvport_post
#
# Create VPort for physical endpoint
# 
# @param InventoryRegularvportRequest $body  (optional)
{
    my $params = {
    'body' => {
        data_type => 'InventoryRegularvportRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_regularvport_post' } = { 
    	summary => 'Create VPort for physical endpoint',
        params => $params,
        returns => 'InventoryRegularvportResponse',
        };
}
# @return InventoryRegularvportResponse
#
sub inventory_regularvport_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/regularvport';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InventoryRegularvportResponse', $response);
    return $_response_object;
}

#
# inventory_vnf_vport_post
#
# Create VNF VPort
# 
# @param InventoryVnfVportRequest $body  (optional)
{
    my $params = {
    'body' => {
        data_type => 'InventoryVnfVportRequest',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_vnf_vport_post' } = { 
    	summary => 'Create VNF VPort',
        params => $params,
        returns => 'InventoryVnfVportResponse',
        };
}
# @return InventoryVnfVportResponse
#
sub inventory_vnf_vport_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/vnf/vport';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InventoryVnfVportResponse', $response);
    return $_response_object;
}

#
# inventory_vport_by_vportuuid_get
#
# Get information about the specified VPort
# 
# @param string $vportuuid Unique identifier representing a specific virtual port (required)
{
    my $params = {
    'vportuuid' => {
        data_type => 'string',
        description => 'Unique identifier representing a specific virtual port',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inventory_vport_by_vportuuid_get' } = { 
    	summary => 'Get information about the specified VPort',
        params => $params,
        returns => 'ARRAY[EndpointPort]',
        };
}
# @return ARRAY[EndpointPort]
#
sub inventory_vport_by_vportuuid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'vportuuid' is set
    unless (exists $args{'vportuuid'}) {
      croak("Missing the required parameter 'vportuuid' when calling inventory_vport_by_vportuuid_get");
    }

    # parse inputs
    my $_resource_path = '/1.0.0/inventory/vport/{vportuuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'vportuuid'}) {
        my $_base_variable = "{" . "vportuuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'vportuuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EndpointPort]', $response);
    return $_response_object;
}

1;
